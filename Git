-------------------------------------------------------------------------------
# Git

<!-- MarkdownTOC levels="2,3" autolink="true" uri_encoding="false" markdown_preview="github" -->

- [1. Системы контроля версий](#1-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9)
- [2. Настройка git](#2-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-git)
  - [2.1. Конфигурационные файлы](#21-%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B)
  - [2.2. Настройка SSH для github](#22-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-ssh-%D0%B4%D0%BB%D1%8F-github)
- [3. Работа с git](#3-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-git)
  - [3.1. Файлы в репозитории](#31-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B-%D0%B2-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B8)
  - [3.2. Индексация и коммит изменений](#32-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D1%8F-%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9)
  - [3.3. Работа с ветками](#33-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8)
  - [3.4. Переход между коммитами](#34-%D0%BF%D0%B5%D1%80%D0%B5%D1%85%D0%BE%D0%B4-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%B0%D0%BC%D0%B8)
  - [3.5. git push и git pull](#35-git-push-%D0%B8-git-pull)

<!-- /MarkdownTOC -->

-------------------------------------------------------------------------------
## 1. Системы контроля версий

**Система контроля версий** (Version Control System) позволяет:

- организовать совместную работу нескольких разработчиков (слияние изменений, разрешение конфликтов и т.д.).
- отслеживать изменения между разными версиями программы.
- фиксировать версию программы на различных этапах разработки, тем самым создавая историю.

Виды систем контроля:

1. **Распределённые**, distributed (у каждого разработчика есть копия истории проекта и разработчики могут свободно обмениваться между собой изменениями, которые они вносят в проект).
2. **Централизованные**, centralized (один репозиторий на одном сервере со всей историей проекта).

**Git** — распределённая система контроля версий.

<p style="text-align:center;"><img src="data/git structure.png" width="550" title="git structure"></p>

**Репозиторий** — хранилище с кодом.

**Коммит** — фиксация изменений (или конкретная версия репозитория).

**Бренч** — альтернативная история кода от какого-то конкретного коммита.

Установка:

- Linux: `sudo apt-get install git`
- Win: обычная установка (или через Cygwin)

Доп.ссылки:

- [Intro to Git](https://www.notion.so/Introduction-to-Git-ac396a0697704709a12b6a0e545db049)
- [Git HowTo (на русском)](https://githowto.com/ru#)
- [GitHub cheat sheet](https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf) + [Git cheat sheet](https://ndpsoftware.com/git-cheatsheet.html)
- [Github guides](https://guides.github.com/)
- [Git docs](https://git-scm.com/docs)


-------------------------------------------------------------------------------
## 2. Настройка git

### 2.1. Конфигурационные файлы

```
git clone <url> <path>  : скачать репозиторий (через https или ssh)
git init                : инициализировать директорию как локальный репозиторий
                          (создастся папка .git)
```

- `.gitignore` — файл со списком игнорируемых гитом файлов репозитория 
- `/etc/gitconfig` — файл содержащий общие значения для всех пользователей системы и для всех их репозиториев (используется при `git config --system`).
- `~/.gitconfig` или `~/.config/git/config` — файл настроек конкретного пользователя (используется при `git config --global`).
- `.git/config` — файл настроек конкретного репозитория

При этом иерархия следующая: настройки репозитория > настройки пользователя > настройки системы.

```
git config --list       : список текущих настроек
git config <key>        : узнать значение ключа из списка настроек

git config --global user.name 'name'
git config --global user.email 'email'
git config --global core.editor subl
git config remote.origin.url <url>
```


### 2.2. Настройка SSH для github

1. Создать ключи: `ssh-keygen -t rsa -b 4096`
2. Добавить публичный ключ `.ssh/id_rsa.pub` на github (в настройках).
3. Начать работу.


-------------------------------------------------------------------------------
## 3. Работа с git

### 3.1. Файлы в репозитории

- Непроиндексированные файлы в локальном репозитории
- Проиндексированные файлы в локальном репозитории
- Проиндексированные файлы на удалённом репозитории

Проиндексированный файл — это файл, за изменением которого git может следить. Индексируются файлы после выполнения команды **git add**, фиксируются изменения после команды **git commit**, а отправляются на удалённый сервер после команды **git push**.

<p style="text-align:center;"><img src="data/git files.png" width="550" title="git files"></p>

Общий алгоритм работы:

```
git add <files>         : проиндексировать файлы
git status              : посмотреть статус текущей ветки
git commit -m 'text'    : зафиксировать изменения в текущей ветке
git pull <rep>          : синхронизироваться с удалённым репозиторием
git push <rep> <branch> : передать локальные изменения на удалённый репозиторий
                          (origin master — на главную ветку)
git log                 : посмотреть историю коммитов
```

### 3.2. Индексация и коммит изменений

```
git add <files>         : проиндексировать файлы
                          .  — все в текущей директории
                          -u — только модифицированные, но не новые
                          -f — включая игнорируемые файлы
git reset <files>       : разиндексировать файлы

git mv <file> <path>    : переместить (переименовать) файл и добавить в индекс
git rm <files>          : удалить файлы из индекса и директории
                          (-rf рекурсивно и принудительно)
git rm --cashed <files> : удалить файлы из индекса, но не из директории

git commit -m 'text'    : зафиксировать изменения в текущей ветке
                          (-a все файлы; --ammend изменить последний коммит)
```

### 3.3. Работа с ветками

```
git branch              : список веток в локальном репозитории
git branch -r           : список веток на удалённом репозитории
git branch -a           : список веток в локальном и удалённом репозиториях
git branch <name>       : создать ветку
git branch -D <name>    : удалить ветку из локального репозитория
git push <rep> -d <name>: удалить ветку из удалённого репозитория

git checkout <name>     : перейти на ветку по имени
git checkout <tag>      : перейти на коммит по тегу (напр. HEAD)
git checkout <hash>     : перейти на коммит по хэшу (из логов)
git checkout -- <file>  : отменить незакоммиченные изменения файла

git merge <name>        : объединить указанную ветку с текущей
git branch --merged     : список объединённых веток
```

### 3.4. Переход между коммитами

```
git status              : посмотреть статус текущей ветки (-s кратко)
git log                 : вывод истории коммитов (-p подробно)
git log <file>          : вывод истории изменений файла
git log --grep=<str>    : вывод истории с указанным паттерном
git log --pretty=<val>  : вывод истории в указанной форме
                          <val> = oneline, short, medium, full, format:<str>
```

Часто бывает полезно, сохранить состояние репозитория (проиндексированные изменения), не делая коммит, например, в ситуации, когда нужно переключиться между ветками, но работа ещё не завершена. Для этого существует команда **git stash**.

```
git stash               : сохранить состояние репозитория без коммита
git stash list          : список записей в stash
git stash pop <#>       : возврат сохранённых изменений (или git stash apply)
git stash drop <#>      : удаление записи из stash

git reset --soft <com>  : вернуться на коммит, не меняя ни индекс, ни каталог
git reset --mixed <com> : вернуться на коммит, изменив индекс, но не каталог
git reset --hard <com>  : вернуться на коммит, изменив индекс с каталогом
git clean -df           : удалить все непроиндексированнные файлы
```

### 3.5. git push и git pull

```
git fetch <rep>         : скачать данные с удалённого репозитория
git pull <rep>          : скачать данные и синхронизироваться с репозиторием
git push <rep>          : передать локальные изменения на удалённый репозиторий

git diff                : сравнить рабочую директорию и последний коммит
git diff --cashed       : сравнить индекс и последний коммит

git diff <1> <2>        : сравнить коммиты или ветки
git diff -- <file>      : сравнить состояния файла в разных коммитах или ветках
```

